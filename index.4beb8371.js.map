{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.score = 0;\n        this.status = Game.STATUS.idle;\n        this.initialState = initialState;\n        this.state = this.initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.status === \"playing\") {\n                    var previousState = this.cloneState(this.state);\n                    this.state.map(function(row) {\n                        _this.move(\"Left\", row);\n                    });\n                    this.checkState(previousState, this.state);\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.status === \"playing\") {\n                    var previousState = this.cloneState(this.state);\n                    this.state.map(function(row) {\n                        _this.move(\"Right\", row);\n                    });\n                    this.checkState(previousState, this.state);\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status === \"playing\") {\n                    var previousState = this.cloneState(this.state);\n                    this.move(\"Up\");\n                    this.checkState(previousState, this.state);\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status === \"playing\") {\n                    var previousState = this.cloneState(this.state);\n                    this.move(\"Down\");\n                    this.checkState(previousState, this.state);\n                }\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                if (this.isLoseCase()) this.status = Game.STATUS.lose;\n                if (this.isWinCase()) this.status = Game.STATUS.win;\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this.getStatus() === \"idle\") {\n                    this.status = Game.STATUS.playing;\n                    this.setRandomNumber();\n                    this.setRandomNumber();\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.state = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.score = 0;\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"move\",\n            value: function move(direction, item) {\n                var shiftMethod = \"shift\".concat(direction);\n                var mergeMethod = \"mergeCells\".concat(direction);\n                this[shiftMethod](item);\n                this[mergeMethod](item);\n                this[shiftMethod](item);\n            }\n        },\n        {\n            key: \"checkState\",\n            value: function checkState(prev, current) {\n                var hasStateChanged = !this.areStatesEqual(prev, current);\n                if (hasStateChanged) this.setRandomNumber();\n            }\n        },\n        {\n            key: \"isWinCase\",\n            value: function isWinCase() {\n                var winValue = 2048;\n                return this.state.some(function(row) {\n                    return row.includes(winValue);\n                });\n            }\n        },\n        {\n            key: \"isLoseCase\",\n            value: function isLoseCase() {\n                return this.getEmptyCells().length === 0 && this.noMovePossible();\n            }\n        },\n        {\n            key: \"noMovePossible\",\n            value: function noMovePossible() {\n                for(var i = 0; i < Game.NUM_ROWS; i++)for(var j = 0; j < Game.NUM_COLUMNS; j++){\n                    if (j < 3 && this.state[i][j] === this.state[i][j + 1]) return false;\n                    if (i < 3 && this.state[i][j] === this.state[i + 1][j]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var i = 0; i < Game.NUM_ROWS; i++){\n                    for(var j = 0; j < Game.NUM_COLUMNS; j++)if (this.state[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                return emptyCells;\n            }\n        },\n        {\n            key: \"shiftDown\",\n            value: function shiftDown() {\n                for(var col = 0; col < Game.NUM_COLUMNS; col++){\n                    var tempColumn = [];\n                    for(var row = 0; row < Game.NUM_ROWS; row++)if (this.state[row][col] !== 0) tempColumn.push(this.state[row][col]);\n                    while(tempColumn.length < Game.NUM_ROWS)tempColumn.unshift(0);\n                    for(var row1 = 0; row1 < Game.NUM_ROWS; row1++)this.state[row1][col] = tempColumn[row1];\n                }\n                return this.state;\n            }\n        },\n        {\n            key: \"mergeCellsDown\",\n            value: function mergeCellsDown() {\n                for(var col = 0; col < Game.NUM_COLUMNS; col++){\n                    var tempColumn = [];\n                    for(var row = 0; row < Game.NUM_ROWS; row++)tempColumn.push(this.state[row][col]);\n                    this.mergeCellsRight(tempColumn);\n                    for(var row1 = 0; row1 < Game.NUM_ROWS; row1++)this.state[row1][col] = tempColumn[row1];\n                }\n            }\n        },\n        {\n            key: \"shiftUp\",\n            value: function shiftUp() {\n                for(var col = 0; col < Game.NUM_COLUMNS; col++){\n                    var tempColumn = [];\n                    for(var row = 0; row < Game.NUM_ROWS; row++)if (this.state[row][col] !== 0) tempColumn.push(this.state[row][col]);\n                    while(tempColumn.length < Game.NUM_ROWS)tempColumn.push(0);\n                    for(var row1 = 0; row1 < Game.NUM_ROWS; row1++)this.state[row1][col] = tempColumn[row1];\n                }\n                return this.state;\n            }\n        },\n        {\n            key: \"mergeCellsUp\",\n            value: function mergeCellsUp() {\n                for(var col = 0; col < Game.NUM_COLUMNS; col++){\n                    var tempColumn = [];\n                    for(var row = 0; row < Game.NUM_ROWS; row++)tempColumn.push(this.state[row][col]);\n                    this.mergeCellsLeft(tempColumn);\n                    for(var row1 = 0; row1 < Game.NUM_ROWS; row1++)this.state[row1][col] = tempColumn[row1];\n                }\n            }\n        },\n        {\n            key: \"setRandomNumber\",\n            value: function setRandomNumber() {\n                var count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n                var emptyCells = this.getEmptyCells();\n                if (emptyCells.length === 0) return;\n                for(var k = 0; k < count; k++)if (emptyCells.length > 0) {\n                    var randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n                    var randNum = Math.random() < Game.PROBABILITY ? 4 : 2;\n                    var _emptyCells_randomEmptyCell = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[randomEmptyCell], 2), i = _emptyCells_randomEmptyCell[0], j = _emptyCells_randomEmptyCell[1];\n                    this.state[i][j] = randNum;\n                }\n            }\n        },\n        {\n            key: \"shiftLeft\",\n            value: function shiftLeft(row) {\n                for(var i = 1; i < row.length; i++)if (row[i] !== 0) {\n                    var j = i;\n                    while(j > 0 && row[j - 1] === 0){\n                        row[j - 1] = row[j];\n                        row[j] = 0;\n                        j--;\n                    }\n                }\n            }\n        },\n        {\n            key: \"mergeCellsLeft\",\n            value: function mergeCellsLeft(row) {\n                for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n                    row[i] = row[i] * 2;\n                    row[i + 1] = 0;\n                    this.score += row[i];\n                }\n                return row;\n            }\n        },\n        {\n            key: \"shiftRight\",\n            value: function shiftRight(row) {\n                for(var i = row.length - 2; i >= 0; i--)if (row[i] !== 0) {\n                    var j = i;\n                    while(j < row.length - 1 && row[j + 1] === 0){\n                        row[j + 1] = row[j];\n                        row[j] = 0;\n                        j++;\n                    }\n                }\n            }\n        },\n        {\n            key: \"mergeCellsRight\",\n            value: function mergeCellsRight(row) {\n                for(var i = row.length - 1; i >= 0; i--)if (row[i] === row[i - 1]) {\n                    row[i] = row[i] * 2;\n                    row[i - 1] = 0;\n                    this.score += row[i];\n                }\n                return row;\n            }\n        },\n        {\n            key: \"cloneState\",\n            value: function cloneState(state) {\n                return state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            key: \"areStatesEqual\",\n            value: function areStatesEqual(state1, state2) {\n                for(var i = 0; i < state1.length; i++)for(var j = 0; j < state1[i].length; j++){\n                    if (state1[i][j] !== state2[i][j]) return false;\n                }\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"STATUS\", {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n});\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"NUM_COLUMNS\", 4);\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"NUM_ROWS\", 4);\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"PROBABILITY\", 0.1);\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$button = document.querySelector(\"button\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$gameFieldRows = document.querySelectorAll(\".field-row\");\nvar $197cd56b15c33885$var$gameFieldArray = (0, $227c6742e0ff6f82$export$71511d61b312f219)($197cd56b15c33885$var$gameFieldRows).map(function(row) {\n    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row.querySelectorAll(\".field-cell\"));\n});\nfunction $197cd56b15c33885$var$handleKeyDown(e) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        if (e.key === \"ArrowLeft\") {\n            $197cd56b15c33885$var$game.moveLeft();\n            $197cd56b15c33885$var$updateUi();\n        }\n        if (e.key === \"ArrowRight\") {\n            $197cd56b15c33885$var$game.moveRight();\n            $197cd56b15c33885$var$updateUi();\n        }\n        if (e.key === \"ArrowUp\") {\n            $197cd56b15c33885$var$game.moveUp();\n            $197cd56b15c33885$var$updateUi();\n        }\n        if (e.key === \"ArrowDown\") {\n            $197cd56b15c33885$var$game.moveDown();\n            $197cd56b15c33885$var$updateUi();\n        }\n    }\n}\nfunction $197cd56b15c33885$var$updateUi() {\n    $197cd56b15c33885$var$updateGameField();\n    $197cd56b15c33885$var$toggleGameMessege();\n}\nfunction $197cd56b15c33885$var$updateGameField() {\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$gameFieldArray.forEach(function(row, rowIdx) {\n        row.forEach(function(cell, colIdx) {\n            var value = state[rowIdx][colIdx];\n            cell.textContent = value !== 0 ? value : \"\";\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(\"field-cell--\".concat(value));\n        });\n    });\n    $197cd56b15c33885$var$score.textContent = \"\".concat($197cd56b15c33885$var$game.getScore());\n}\nfunction $197cd56b15c33885$var$toggleGameButton() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) $197cd56b15c33885$var$startGame();\n    else if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) $197cd56b15c33885$var$restartGame();\n}\nfunction $197cd56b15c33885$var$toggleGameMessege() {\n    var stat = $197cd56b15c33885$var$game.getStatus();\n    [\n        $197cd56b15c33885$var$messageStart,\n        $197cd56b15c33885$var$messageLose,\n        $197cd56b15c33885$var$messageWin\n    ].forEach(function(message) {\n        return message.classList.add(\"hidden\");\n    });\n    if (stat === \"idle\") $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n    if (stat === \"lose\") $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n    if (stat === \"win\") $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$startGame(e) {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$button.classList.remove(\"start\");\n    $197cd56b15c33885$var$button.classList.add(\"restart\");\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    $197cd56b15c33885$var$button.textContent = \"Restart\";\n    $197cd56b15c33885$var$updateUi();\n}\nfunction $197cd56b15c33885$var$restartGame(e) {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$button.classList.remove(\"restart\");\n    $197cd56b15c33885$var$button.classList.add(\"start\");\n    $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$button.textContent = \"Start\";\n    $197cd56b15c33885$var$updateUi();\n}\ndocument.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n$197cd56b15c33885$var$button.addEventListener(\"click\", $197cd56b15c33885$var$toggleGameButton);\n\n})();\n//# sourceMappingURL=index.4beb8371.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameFieldRows = document.querySelectorAll('.field-row');\nconst gameFieldArray = [...gameFieldRows].map((row) => {\n  return [...row.querySelectorAll('.field-cell')];\n});\n\nfunction handleKeyDown(e) {\n  if (game.getStatus() === 'playing') {\n    if (e.key === 'ArrowLeft') {\n      game.moveLeft();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowRight') {\n      game.moveRight();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowUp') {\n      game.moveUp();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowDown') {\n      game.moveDown();\n      updateUi();\n    }\n  }\n}\n\nfunction updateUi() {\n  updateGameField();\n  toggleGameMessege();\n}\n\nfunction updateGameField() {\n  const state = game.getState();\n\n  gameFieldArray.forEach((row, rowIdx) => {\n    row.forEach((cell, colIdx) => {\n      const value = state[rowIdx][colIdx];\n\n      cell.textContent = value !== 0 ? value : '';\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n\n  score.textContent = `${game.getScore()}`;\n}\n\nfunction toggleGameButton() {\n  if (button.classList.contains('start')) {\n    startGame();\n  } else if (button.classList.contains('restart')) {\n    restartGame();\n  }\n}\n\nfunction toggleGameMessege() {\n  const stat = game.getStatus();\n\n  [messageStart, messageLose, messageWin].forEach((message) => {\n    return message.classList.add('hidden');\n  });\n\n  if (stat === 'idle') {\n    messageStart.classList.remove('hidden');\n  }\n\n  if (stat === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (stat === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction startGame(e) {\n  game.start();\n\n  button.classList.remove('start');\n  button.classList.add('restart');\n  messageStart.classList.add('hidden');\n  button.textContent = 'Restart';\n\n  updateUi();\n}\n\nfunction restartGame(e) {\n  game.restart();\n\n  button.classList.remove('restart');\n  button.classList.add('start');\n  messageStart.classList.remove('hidden');\n  button.textContent = 'Start';\n\n  updateUi();\n}\n\ndocument.addEventListener('keydown', handleKeyDown);\nbutton.addEventListener('click', toggleGameButton);\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\nclass Game {\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n  static NUM_COLUMNS = 4;\n  static NUM_ROWS = 4;\n  static PROBABILITY = 0.1;\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.state.map((row) => {\n        this.move('Left', row);\n      });\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.state.map((row) => {\n        this.move('Right', row);\n      });\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.move('Up');\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.move('Down');\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    if (this.isLoseCase()) {\n      this.status = Game.STATUS.lose;\n    }\n\n    if (this.isWinCase()) {\n      this.status = Game.STATUS.win;\n    }\n\n    return this.status;\n  }\n\n  start() {\n    if (this.getStatus() === 'idle') {\n      this.status = Game.STATUS.playing;\n      this.setRandomNumber();\n      this.setRandomNumber();\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  // Add your own methods here\n\n  move(direction, item) {\n    const shiftMethod = `shift${direction}`;\n    const mergeMethod = `mergeCells${direction}`;\n\n    this[shiftMethod](item);\n    this[mergeMethod](item);\n    this[shiftMethod](item);\n  }\n\n  checkState(prev, current) {\n    const hasStateChanged = !this.areStatesEqual(prev, current);\n\n    if (hasStateChanged) {\n      this.setRandomNumber();\n    }\n  }\n\n  isWinCase() {\n    const winValue = 2048;\n\n    return this.state.some((row) => row.includes(winValue));\n  }\n\n  isLoseCase() {\n    return this.getEmptyCells().length === 0 && this.noMovePossible();\n  }\n\n  noMovePossible() {\n    for (let i = 0; i < Game.NUM_ROWS; i++) {\n      for (let j = 0; j < Game.NUM_COLUMNS; j++) {\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          return false;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < Game.NUM_ROWS; i++) {\n      for (let j = 0; j < Game.NUM_COLUMNS; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  shiftDown() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        if (this.state[row][col] !== 0) {\n          tempColumn.push(this.state[row][col]);\n        }\n      }\n\n      while (tempColumn.length < Game.NUM_ROWS) {\n        tempColumn.unshift(0);\n      }\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n\n    return this.state;\n  }\n\n  mergeCellsDown() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        tempColumn.push(this.state[row][col]);\n      }\n\n      this.mergeCellsRight(tempColumn);\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n  }\n\n  shiftUp() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        if (this.state[row][col] !== 0) {\n          tempColumn.push(this.state[row][col]);\n        }\n      }\n\n      while (tempColumn.length < Game.NUM_ROWS) {\n        tempColumn.push(0);\n      }\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n\n    return this.state;\n  }\n\n  mergeCellsUp() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        tempColumn.push(this.state[row][col]);\n      }\n\n      this.mergeCellsLeft(tempColumn);\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n  }\n\n  setRandomNumber(count = 1) {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    for (let k = 0; k < count; k++) {\n      if (emptyCells.length > 0) {\n        const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n\n        const randNum = Math.random() < Game.PROBABILITY ? 4 : 2;\n        const [i, j] = emptyCells[randomEmptyCell];\n\n        this.state[i][j] = randNum;\n      }\n    }\n  }\n\n  shiftLeft(row) {\n    for (let i = 1; i < row.length; i++) {\n      if (row[i] !== 0) {\n        let j = i;\n\n        while (j > 0 && row[j - 1] === 0) {\n          row[j - 1] = row[j];\n          row[j] = 0;\n          j--;\n        }\n      }\n    }\n  }\n\n  mergeCellsLeft(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] = row[i] * 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  shiftRight(row) {\n    for (let i = row.length - 2; i >= 0; i--) {\n      if (row[i] !== 0) {\n        let j = i;\n\n        while (j < row.length - 1 && row[j + 1] === 0) {\n          row[j + 1] = row[j];\n          row[j] = 0;\n          j++;\n        }\n      }\n    }\n  }\n\n  mergeCellsRight(row) {\n    for (let i = row.length - 1; i >= 0; i--) {\n      if (row[i] === row[i - 1]) {\n        row[i] = row[i] * 2;\n        row[i - 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let i = 0; i < state1.length; i++) {\n      for (let j = 0; j < state1[i].length; j++) {\n        if (state1[i][j] !== state2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","TypeError","$cd5a47cf8ef6d766$export$71511d61b312f219","obj","key","value","defineProperty","enumerable","configurable","writable","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","instance","Constructor","score","status","STATUS","idle","state","map","row","_this","previousState","cloneState","move","checkState","isLoseCase","lose","isWinCase","win","getStatus","playing","setRandomNumber","direction","item","shiftMethod","concat","prev","current","areStatesEqual","some","includes","getEmptyCells","noMovePossible","NUM_ROWS","j","NUM_COLUMNS","emptyCells","push","col","tempColumn","unshift","row1","mergeCellsRight","mergeCellsLeft","count","k","randomEmptyCell","Math","floor","random","randNum","PROBABILITY","_emptyCells_randomEmptyCell","_s","_e","_i","_arr","_n","_d","next","done","err","state1","state2","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$game","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$score","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$gameFieldArray","querySelectorAll","$197cd56b15c33885$var$updateUi","stat","getState","forEach","rowIdx","cell","colIdx","textContent","className","classList","add","getScore","message","remove","addEventListener","e","moveLeft","moveRight","moveUp","moveDown","contains","start","restart"],"version":3,"file":"index.4beb8371.js.map"}