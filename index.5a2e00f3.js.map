{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    static NUM_COLUMNS = 4;\n    static NUM_ROWS = 4;\n    static PROBABILITY = 0.1;\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const previousState = this.cloneState(this.state);\n            this.state.map((row)=>{\n                this.move(\"Left\", row);\n            });\n            this.checkState(previousState, this.state);\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const previousState = this.cloneState(this.state);\n            this.state.map((row)=>{\n                this.move(\"Right\", row);\n            });\n            this.checkState(previousState, this.state);\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const previousState = this.cloneState(this.state);\n            this.move(\"Up\");\n            this.checkState(previousState, this.state);\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const previousState = this.cloneState(this.state);\n            this.move(\"Down\");\n            this.checkState(previousState, this.state);\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        if (this.isLoseCase()) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n        if (this.isWinCase()) this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n        return this.status;\n    }\n    start() {\n        if (this.getStatus() === \"idle\") {\n            this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n            this.setRandomNumber();\n            this.setRandomNumber();\n        }\n    }\n    restart() {\n        this.status = \"idle\";\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    // Add your own methods here\n    move(direction, item) {\n        const shiftMethod = `shift${direction}`;\n        const mergeMethod = `mergeCells${direction}`;\n        this[shiftMethod](item);\n        this[mergeMethod](item);\n        this[shiftMethod](item);\n    }\n    checkState(prev, current) {\n        const hasStateChanged = !this.areStatesEqual(prev, current);\n        if (hasStateChanged) this.setRandomNumber();\n    }\n    isWinCase() {\n        const winValue = 2048;\n        return this.state.some((row)=>row.includes(winValue));\n    }\n    isLoseCase() {\n        return this.getEmptyCells().length === 0 && this.noMovePossible();\n    }\n    noMovePossible() {\n        for(let i = 0; i < $a5fd07fa01589658$var$Game.NUM_ROWS; i++)for(let j = 0; j < $a5fd07fa01589658$var$Game.NUM_COLUMNS; j++){\n            if (j < 3 && this.state[i][j] === this.state[i][j + 1]) return false;\n            if (i < 3 && this.state[i][j] === this.state[i + 1][j]) return false;\n        }\n        return true;\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let i = 0; i < $a5fd07fa01589658$var$Game.NUM_ROWS; i++){\n            for(let j = 0; j < $a5fd07fa01589658$var$Game.NUM_COLUMNS; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    shiftDown() {\n        for(let col = 0; col < $a5fd07fa01589658$var$Game.NUM_COLUMNS; col++){\n            const tempColumn = [];\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)if (this.state[row][col] !== 0) tempColumn.push(this.state[row][col]);\n            while(tempColumn.length < $a5fd07fa01589658$var$Game.NUM_ROWS)tempColumn.unshift(0);\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)this.state[row][col] = tempColumn[row];\n        }\n        return this.state;\n    }\n    mergeCellsDown() {\n        for(let col = 0; col < $a5fd07fa01589658$var$Game.NUM_COLUMNS; col++){\n            const tempColumn = [];\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)tempColumn.push(this.state[row][col]);\n            this.mergeCellsRight(tempColumn);\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)this.state[row][col] = tempColumn[row];\n        }\n    }\n    shiftUp() {\n        for(let col = 0; col < $a5fd07fa01589658$var$Game.NUM_COLUMNS; col++){\n            const tempColumn = [];\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)if (this.state[row][col] !== 0) tempColumn.push(this.state[row][col]);\n            while(tempColumn.length < $a5fd07fa01589658$var$Game.NUM_ROWS)tempColumn.push(0);\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)this.state[row][col] = tempColumn[row];\n        }\n        return this.state;\n    }\n    mergeCellsUp() {\n        for(let col = 0; col < $a5fd07fa01589658$var$Game.NUM_COLUMNS; col++){\n            const tempColumn = [];\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)tempColumn.push(this.state[row][col]);\n            this.mergeCellsLeft(tempColumn);\n            for(let row = 0; row < $a5fd07fa01589658$var$Game.NUM_ROWS; row++)this.state[row][col] = tempColumn[row];\n        }\n    }\n    setRandomNumber(count = 1) {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length === 0) return;\n        for(let k = 0; k < count; k++)if (emptyCells.length > 0) {\n            const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n            const randNum = Math.random() < $a5fd07fa01589658$var$Game.PROBABILITY ? 4 : 2;\n            const [i, j] = emptyCells[randomEmptyCell];\n            this.state[i][j] = randNum;\n        }\n    }\n    shiftLeft(row) {\n        for(let i = 1; i < row.length; i++)if (row[i] !== 0) {\n            let j = i;\n            while(j > 0 && row[j - 1] === 0){\n                row[j - 1] = row[j];\n                row[j] = 0;\n                j--;\n            }\n        }\n    }\n    mergeCellsLeft(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n            row[i] = row[i] * 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return row;\n    }\n    shiftRight(row) {\n        for(let i = row.length - 2; i >= 0; i--)if (row[i] !== 0) {\n            let j = i;\n            while(j < row.length - 1 && row[j + 1] === 0){\n                row[j + 1] = row[j];\n                row[j] = 0;\n                j++;\n            }\n        }\n    }\n    mergeCellsRight(row) {\n        for(let i = row.length - 1; i >= 0; i--)if (row[i] === row[i - 1]) {\n            row[i] = row[i] * 2;\n            row[i - 1] = 0;\n            this.score += row[i];\n        }\n        return row;\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    areStatesEqual(state1, state2) {\n        for(let i = 0; i < state1.length; i++)for(let j = 0; j < state1[i].length; j++){\n            if (state1[i][j] !== state2[i][j]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameFieldRows = document.querySelectorAll(\".field-row\");\nconst $09e991522ca7e64e$var$gameFieldArray = [\n    ...$09e991522ca7e64e$var$gameFieldRows\n].map((row)=>{\n    return [\n        ...row.querySelectorAll(\".field-cell\")\n    ];\n});\nfunction $09e991522ca7e64e$var$handleKeyDown(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        if (e.key === \"ArrowLeft\") {\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$updateUi();\n        }\n        if (e.key === \"ArrowRight\") {\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$updateUi();\n        }\n        if (e.key === \"ArrowUp\") {\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$updateUi();\n        }\n        if (e.key === \"ArrowDown\") {\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$updateUi();\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$updateUi() {\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$toggleGameMessege();\n}\nfunction $09e991522ca7e64e$var$updateGameField() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameFieldArray.forEach((row, rowIdx)=>{\n        row.forEach((cell, colIdx)=>{\n            const value = state[rowIdx][colIdx];\n            cell.textContent = value !== 0 ? value : \"\";\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(`field-cell--${value}`);\n        });\n    });\n    $09e991522ca7e64e$var$score.textContent = `${$09e991522ca7e64e$var$game.getScore()}`;\n}\nfunction $09e991522ca7e64e$var$toggleGameButton() {\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) $09e991522ca7e64e$var$startGame();\n    else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) $09e991522ca7e64e$var$restartGame();\n}\nfunction $09e991522ca7e64e$var$toggleGameMessege() {\n    const stat = $09e991522ca7e64e$var$game.getStatus();\n    [\n        $09e991522ca7e64e$var$messageStart,\n        $09e991522ca7e64e$var$messageLose,\n        $09e991522ca7e64e$var$messageWin\n    ].forEach((message)=>{\n        return message.classList.add(\"hidden\");\n    });\n    if (stat === \"idle\") $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    if (stat === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if (stat === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$startGame(e) {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$button.classList.remove(\"start\");\n    $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$updateUi();\n}\nfunction $09e991522ca7e64e$var$restartGame(e) {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$button.classList.add(\"start\");\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$button.textContent = \"Start\";\n    $09e991522ca7e64e$var$updateUi();\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$toggleGameButton);\n\n\n//# sourceMappingURL=index.5a2e00f3.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameFieldRows = document.querySelectorAll('.field-row');\nconst gameFieldArray = [...gameFieldRows].map((row) => {\n  return [...row.querySelectorAll('.field-cell')];\n});\n\nfunction handleKeyDown(e) {\n  if (game.getStatus() === 'playing') {\n    if (e.key === 'ArrowLeft') {\n      game.moveLeft();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowRight') {\n      game.moveRight();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowUp') {\n      game.moveUp();\n      updateUi();\n    }\n\n    if (e.key === 'ArrowDown') {\n      game.moveDown();\n      updateUi();\n    }\n  }\n}\n\nfunction updateUi() {\n  updateGameField();\n  toggleGameMessege();\n}\n\nfunction updateGameField() {\n  const state = game.getState();\n\n  gameFieldArray.forEach((row, rowIdx) => {\n    row.forEach((cell, colIdx) => {\n      const value = state[rowIdx][colIdx];\n\n      cell.textContent = value !== 0 ? value : '';\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n\n  score.textContent = `${game.getScore()}`;\n}\n\nfunction toggleGameButton() {\n  if (button.classList.contains('start')) {\n    startGame();\n  } else if (button.classList.contains('restart')) {\n    restartGame();\n  }\n}\n\nfunction toggleGameMessege() {\n  const stat = game.getStatus();\n\n  [messageStart, messageLose, messageWin].forEach((message) => {\n    return message.classList.add('hidden');\n  });\n\n  if (stat === 'idle') {\n    messageStart.classList.remove('hidden');\n  }\n\n  if (stat === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (stat === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction startGame(e) {\n  game.start();\n\n  button.classList.remove('start');\n  button.classList.add('restart');\n  messageStart.classList.add('hidden');\n  button.textContent = 'Restart';\n\n  updateUi();\n}\n\nfunction restartGame(e) {\n  game.restart();\n\n  button.classList.remove('restart');\n  button.classList.add('start');\n  messageStart.classList.remove('hidden');\n  button.textContent = 'Start';\n\n  updateUi();\n}\n\ndocument.addEventListener('keydown', handleKeyDown);\nbutton.addEventListener('click', toggleGameButton);\n","'use strict';\n\nclass Game {\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n  static NUM_COLUMNS = 4;\n  static NUM_ROWS = 4;\n  static PROBABILITY = 0.1;\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.state.map((row) => {\n        this.move('Left', row);\n      });\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.state.map((row) => {\n        this.move('Right', row);\n      });\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.move('Up');\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const previousState = this.cloneState(this.state);\n\n      this.move('Down');\n\n      this.checkState(previousState, this.state);\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    if (this.isLoseCase()) {\n      this.status = Game.STATUS.lose;\n    }\n\n    if (this.isWinCase()) {\n      this.status = Game.STATUS.win;\n    }\n\n    return this.status;\n  }\n\n  start() {\n    if (this.getStatus() === 'idle') {\n      this.status = Game.STATUS.playing;\n      this.setRandomNumber();\n      this.setRandomNumber();\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  // Add your own methods here\n\n  move(direction, item) {\n    const shiftMethod = `shift${direction}`;\n    const mergeMethod = `mergeCells${direction}`;\n\n    this[shiftMethod](item);\n    this[mergeMethod](item);\n    this[shiftMethod](item);\n  }\n\n  checkState(prev, current) {\n    const hasStateChanged = !this.areStatesEqual(prev, current);\n\n    if (hasStateChanged) {\n      this.setRandomNumber();\n    }\n  }\n\n  isWinCase() {\n    const winValue = 2048;\n\n    return this.state.some((row) => row.includes(winValue));\n  }\n\n  isLoseCase() {\n    return this.getEmptyCells().length === 0 && this.noMovePossible();\n  }\n\n  noMovePossible() {\n    for (let i = 0; i < Game.NUM_ROWS; i++) {\n      for (let j = 0; j < Game.NUM_COLUMNS; j++) {\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          return false;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < Game.NUM_ROWS; i++) {\n      for (let j = 0; j < Game.NUM_COLUMNS; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  shiftDown() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        if (this.state[row][col] !== 0) {\n          tempColumn.push(this.state[row][col]);\n        }\n      }\n\n      while (tempColumn.length < Game.NUM_ROWS) {\n        tempColumn.unshift(0);\n      }\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n\n    return this.state;\n  }\n\n  mergeCellsDown() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        tempColumn.push(this.state[row][col]);\n      }\n\n      this.mergeCellsRight(tempColumn);\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n  }\n\n  shiftUp() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        if (this.state[row][col] !== 0) {\n          tempColumn.push(this.state[row][col]);\n        }\n      }\n\n      while (tempColumn.length < Game.NUM_ROWS) {\n        tempColumn.push(0);\n      }\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n\n    return this.state;\n  }\n\n  mergeCellsUp() {\n    for (let col = 0; col < Game.NUM_COLUMNS; col++) {\n      const tempColumn = [];\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        tempColumn.push(this.state[row][col]);\n      }\n\n      this.mergeCellsLeft(tempColumn);\n\n      for (let row = 0; row < Game.NUM_ROWS; row++) {\n        this.state[row][col] = tempColumn[row];\n      }\n    }\n  }\n\n  setRandomNumber(count = 1) {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    for (let k = 0; k < count; k++) {\n      if (emptyCells.length > 0) {\n        const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n\n        const randNum = Math.random() < Game.PROBABILITY ? 4 : 2;\n        const [i, j] = emptyCells[randomEmptyCell];\n\n        this.state[i][j] = randNum;\n      }\n    }\n  }\n\n  shiftLeft(row) {\n    for (let i = 1; i < row.length; i++) {\n      if (row[i] !== 0) {\n        let j = i;\n\n        while (j > 0 && row[j - 1] === 0) {\n          row[j - 1] = row[j];\n          row[j] = 0;\n          j--;\n        }\n      }\n    }\n  }\n\n  mergeCellsLeft(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] = row[i] * 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  shiftRight(row) {\n    for (let i = row.length - 2; i >= 0; i--) {\n      if (row[i] !== 0) {\n        let j = i;\n\n        while (j < row.length - 1 && row[j + 1] === 0) {\n          row[j + 1] = row[j];\n          row[j] = 0;\n          j++;\n        }\n      }\n    }\n  }\n\n  mergeCellsRight(row) {\n    for (let i = row.length - 1; i >= 0; i--) {\n      if (row[i] === row[i - 1]) {\n        row[i] = row[i] * 2;\n        row[i - 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let i = 0; i < state1.length; i++) {\n      for (let j = 0; j < state1[i].length; j++) {\n        if (state1[i][j] !== state2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","NUM_COLUMNS","NUM_ROWS","PROBABILITY","constructor","initialState","score","status","state","map","row","moveLeft","previousState","cloneState","move","checkState","moveRight","moveUp","moveDown","getScore","getState","getStatus","isLoseCase","isWinCase","start","setRandomNumber","restart","direction","item","shiftMethod","mergeMethod","prev","current","areStatesEqual","some","includes","getEmptyCells","length","noMovePossible","i","j","emptyCells","push","shiftDown","col","tempColumn","unshift","mergeCellsDown","mergeCellsRight","shiftUp","mergeCellsUp","mergeCellsLeft","count","k","randomEmptyCell","Math","floor","random","randNum","shiftLeft","shiftRight","state1","state2","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$gameFieldArray","querySelectorAll","$09e991522ca7e64e$var$updateUi","$09e991522ca7e64e$var$updateGameField","forEach","rowIdx","cell","colIdx","value","textContent","className","classList","add","$09e991522ca7e64e$var$toggleGameMessege","stat","message","remove","addEventListener","e","key","contains"],"version":3,"file":"index.5a2e00f3.js.map"}